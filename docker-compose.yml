version: '2'

services:
  db-data:
    build:
      context: ./data
      dockerfile: data.dockerfile
    image: ${CONTAINER_PREFIX}.data
    container_name: ${CONTAINER_PREFIX}.db-data
    volumes:
      - ${DATABASE_FOLDER}:/var/lib/mysql
    restart: always
    networks:
      - backend

  back-data:
    image: ${CONTAINER_PREFIX}.data
    container_name: ${CONTAINER_PREFIX}.back-data
    volumes:
      - ${BACKEND_FOLDER}:/var/www/html
    restart: always
    networks:
      - backend

  front-data:
    image: ${CONTAINER_PREFIX}.data
    container_name: ${CONTAINER_PREFIX}.front-data
    volumes:
      - ${FRONTEND_FOLDER}:/var/app
    restart: always
    networks:
      - frontend

  mysql:
    image: mysql
    container_name: ${CONTAINER_PREFIX}.mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    depends_on:
      - db-data
    volumes_from:
      - db-data
    ports:
      - ${MYSQL_PORT}:3306
    restart: always
    networks:
      - backend

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: ${CONTAINER_PREFIX}.phpmyadmin
    depends_on:
      - mysql
    links:
      - mysql
    environment:
      - PMA_ARBITRARY=1
    ports:
      - ${PHPMYADMIN_PORT}:80
    restart: always
    networks:
      - backend
      - frontend

  php:
    build:
      context: ./php7-apache
      dockerfile: php.dockerfile
      args:
        TIMEZONE: ${TIMEZONE}
    image: ${CONTAINER_PREFIX}.php
    container_name: ${CONTAINER_PREFIX}.php
    depends_on:
      - back-data
    volumes_from:
      - back-data
    links:
      - mysql
    volumes:
      #:ro option makes the mount read-only.
      - ${DOCKER_FILES}/php7-apache/php/php.ini:/usr/local/etc/php/php.ini
      - ${DOCKER_FILES}/php7-apache/apache2/apache2.conf:/etc/apache2/conf-enabled/apache2.conf:ro
      - ${DOCKER_FILES}/php7-apache/apache2/hosts.conf:/etc/apache2/sites-enabled/hosts.conf:ro
    ports:
      - ${APACHE_PORT}:80
    restart: always
    networks:
      - backend

  node:
    build:
      context: ./node
      dockerfile: node.dockerfile
    image: ${CONTAINER_PREFIX}.node
    container_name: ${CONTAINER_PREFIX}.node
    depends_on:
      - front-data
    volumes_from:
      - front-data
    entrypoint:
     - npm
     - start
    ports:
      - ${NODE_PORT}:3000
    restart: always
    networks:
      - frontend

  browsersync:
    build:
      context: ./sync
      dockerfile: sync.dockerfile
    image: ${CONTAINER_PREFIX}.browsersync
    container_name: ${CONTAINER_PREFIX}.browsersync
    depends_on:
      - php
    volumes_from:
      - back-data
    links:
      - php
    volumes:
      - ${NODE_FOLDER}:/var/browser/node_modules
    command: start --proxy "php:80" --files "*.php" "*/*.html" "*/*.js" "*/*.css" "*/*.twig" --reload-debounce "2000"
    ports:
      - ${BROWSERSYNC_PORT}:3000
      - ${BROWSERSYNC_ADMIN_PORT}:3001
    restart: always
    networks:
      - backend
      - frontend

networks:
  frontend:
  backend: